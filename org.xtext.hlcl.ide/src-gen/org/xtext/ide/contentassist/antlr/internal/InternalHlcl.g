/*
 * generated by Xtext 2.13.0
 */
grammar InternalHlcl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.services.HlclGrammarAccess;

}
@parser::members {
	private HlclGrammarAccess grammarAccess;

	public void setGrammarAccess(HlclGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariables
entryRuleVariables
:
{ before(grammarAccess.getVariablesRule()); }
	 ruleVariables
{ after(grammarAccess.getVariablesRule()); } 
	 EOF 
;

// Rule Variables
ruleVariables 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariablesAccess().getVarsAssignment()); }
		(rule__Variables__VarsAssignment)
		{ after(grammarAccess.getVariablesAccess().getVarsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariable
entryRuleVariable
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAccess().getGroup()); }
		(rule__Variable__Group__0)
		{ after(grammarAccess.getVariableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDomain
entryRuleDomain
:
{ before(grammarAccess.getDomainRule()); }
	 ruleDomain
{ after(grammarAccess.getDomainRule()); } 
	 EOF 
;

// Rule Domain
ruleDomain 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDomainAccess().getDomAssignment()); }
		(rule__Domain__DomAssignment)
		{ after(grammarAccess.getDomainAccess().getDomAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRangeDomain
entryRuleRangeDomain
:
{ before(grammarAccess.getRangeDomainRule()); }
	 ruleRangeDomain
{ after(grammarAccess.getRangeDomainRule()); } 
	 EOF 
;

// Rule RangeDomain
ruleRangeDomain 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRangeDomainAccess().getGroup()); }
		(rule__RangeDomain__Group__0)
		{ after(grammarAccess.getRangeDomainAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSetDomain
entryRuleSetDomain
:
{ before(grammarAccess.getSetDomainRule()); }
	 ruleSetDomain
{ after(grammarAccess.getSetDomainRule()); } 
	 EOF 
;

// Rule SetDomain
ruleSetDomain 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSetDomainAccess().getGroup()); }
		(rule__SetDomain__Group__0)
		{ after(grammarAccess.getSetDomainAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConsExp
entryRuleConsExp
:
{ before(grammarAccess.getConsExpRule()); }
	 ruleConsExp
{ after(grammarAccess.getConsExpRule()); } 
	 EOF 
;

// Rule ConsExp
ruleConsExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConsExpAccess().getAlternatives()); }
		(rule__ConsExp__Alternatives)
		{ after(grammarAccess.getConsExpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanExp
entryRuleBooleanExp
:
{ before(grammarAccess.getBooleanExpRule()); }
	 ruleBooleanExp
{ after(grammarAccess.getBooleanExpRule()); } 
	 EOF 
;

// Rule BooleanExp
ruleBooleanExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanExpAccess().getBooleanExpressionKeyword()); }
		'Boolean expression'
		{ after(grammarAccess.getBooleanExpAccess().getBooleanExpressionKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntExp
entryRuleIntExp
:
{ before(grammarAccess.getIntExpRule()); }
	 ruleIntExp
{ after(grammarAccess.getIntExpRule()); } 
	 EOF 
;

// Rule IntExp
ruleIntExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntExpAccess().getIntExpressionKeyword()); }
		'Int expression'
		{ after(grammarAccess.getIntExpAccess().getIntExpressionKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Domain__DomAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDomainAccess().getDomRangeDomainParserRuleCall_0_0()); }
		ruleRangeDomain
		{ after(grammarAccess.getDomainAccess().getDomRangeDomainParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getDomainAccess().getDomSetDomainParserRuleCall_0_1()); }
		ruleSetDomain
		{ after(grammarAccess.getDomainAccess().getDomSetDomainParserRuleCall_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsExp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConsExpAccess().getBooleanExpParserRuleCall_0()); }
		ruleBooleanExp
		{ after(grammarAccess.getConsExpAccess().getBooleanExpParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getConsExpAccess().getIntExpParserRuleCall_1()); }
		ruleIntExp
		{ after(grammarAccess.getConsExpAccess().getIntExpParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getModelAccess().getVarsAssignment_0()); }
		(rule__Model__VarsAssignment_0)
		{ after(grammarAccess.getModelAccess().getVarsAssignment_0()); }
	)
	(
		{ before(grammarAccess.getModelAccess().getVarsAssignment_0()); }
		(rule__Model__VarsAssignment_0)*
		{ after(grammarAccess.getModelAccess().getVarsAssignment_0()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getModelAccess().getConstraintsAssignment_1()); }
		(rule__Model__ConstraintsAssignment_1)
		{ after(grammarAccess.getModelAccess().getConstraintsAssignment_1()); }
	)
	(
		{ before(grammarAccess.getModelAccess().getConstraintsAssignment_1()); }
		(rule__Model__ConstraintsAssignment_1)*
		{ after(grammarAccess.getModelAccess().getConstraintsAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__0__Impl
	rule__Variable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getVarKeyword_0()); }
	'var'
	{ after(grammarAccess.getVariableAccess().getVarKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__1__Impl
	rule__Variable__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getNameAssignment_1()); }
	(rule__Variable__NameAssignment_1)
	{ after(grammarAccess.getVariableAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__2__Impl
	rule__Variable__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getInKeyword_2()); }
	'in'
	{ after(grammarAccess.getVariableAccess().getInKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getDomAssignment_3()); }
	(rule__Variable__DomAssignment_3)
	{ after(grammarAccess.getVariableAccess().getDomAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RangeDomain__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RangeDomain__Group__0__Impl
	rule__RangeDomain__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeDomain__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeDomainAccess().getStartAssignment_0()); }
	(rule__RangeDomain__StartAssignment_0)
	{ after(grammarAccess.getRangeDomainAccess().getStartAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeDomain__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RangeDomain__Group__1__Impl
	rule__RangeDomain__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeDomain__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeDomainAccess().getFullStopFullStopKeyword_1()); }
	'..'
	{ after(grammarAccess.getRangeDomainAccess().getFullStopFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeDomain__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RangeDomain__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeDomain__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeDomainAccess().getEndAssignment_2()); }
	(rule__RangeDomain__EndAssignment_2)
	{ after(grammarAccess.getRangeDomainAccess().getEndAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SetDomain__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetDomain__Group__0__Impl
	rule__SetDomain__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetDomain__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetDomainAccess().getLeftSquareBracketKeyword_0()); }
	'['
	{ after(grammarAccess.getSetDomainAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetDomain__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetDomain__Group__1__Impl
	rule__SetDomain__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetDomain__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetDomainAccess().getGroup_1()); }
	(rule__SetDomain__Group_1__0)
	{ after(grammarAccess.getSetDomainAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetDomain__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetDomain__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetDomain__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetDomainAccess().getRightSquareBracketKeyword_2()); }
	']'
	{ after(grammarAccess.getSetDomainAccess().getRightSquareBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SetDomain__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetDomain__Group_1__0__Impl
	rule__SetDomain__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetDomain__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetDomainAccess().getListAssignment_1_0()); }
	(rule__SetDomain__ListAssignment_1_0)
	{ after(grammarAccess.getSetDomainAccess().getListAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetDomain__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetDomain__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetDomain__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getSetDomainAccess().getGroup_1_1()); }
		(rule__SetDomain__Group_1_1__0)
		{ after(grammarAccess.getSetDomainAccess().getGroup_1_1()); }
	)
	(
		{ before(grammarAccess.getSetDomainAccess().getGroup_1_1()); }
		(rule__SetDomain__Group_1_1__0)*
		{ after(grammarAccess.getSetDomainAccess().getGroup_1_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SetDomain__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetDomain__Group_1_1__0__Impl
	rule__SetDomain__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetDomain__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetDomainAccess().getCommaKeyword_1_1_0()); }
	','
	{ after(grammarAccess.getSetDomainAccess().getCommaKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetDomain__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetDomain__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetDomain__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetDomainAccess().getINTTerminalRuleCall_1_1_1()); }
	RULE_INT
	{ after(grammarAccess.getSetDomainAccess().getINTTerminalRuleCall_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__VarsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getVarsVariablesParserRuleCall_0_0()); }
		ruleVariables
		{ after(grammarAccess.getModelAccess().getVarsVariablesParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ConstraintsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getConstraintsConsExpParserRuleCall_1_0()); }
		ruleConsExp
		{ after(grammarAccess.getModelAccess().getConstraintsConsExpParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variables__VarsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariablesAccess().getVarsVariableParserRuleCall_0()); }
		ruleVariable
		{ after(grammarAccess.getVariablesAccess().getVarsVariableParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__DomAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getDomDomainParserRuleCall_3_0()); }
		ruleDomain
		{ after(grammarAccess.getVariableAccess().getDomDomainParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Domain__DomAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDomainAccess().getDomAlternatives_0()); }
		(rule__Domain__DomAlternatives_0)
		{ after(grammarAccess.getDomainAccess().getDomAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeDomain__StartAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRangeDomainAccess().getStartINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getRangeDomainAccess().getStartINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeDomain__EndAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRangeDomainAccess().getEndINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getRangeDomainAccess().getEndINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetDomain__ListAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetDomainAccess().getListINTTerminalRuleCall_1_0_0()); }
		RULE_INT
		{ after(grammarAccess.getSetDomainAccess().getListINTTerminalRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
