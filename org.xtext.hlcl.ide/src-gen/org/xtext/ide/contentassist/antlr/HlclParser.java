/*
 * generated by Xtext 2.13.0
 */
package org.xtext.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.ide.contentassist.antlr.internal.InternalHlclParser;
import org.xtext.services.HlclGrammarAccess;

public class HlclParser extends AbstractContentAssistParser {

	@Inject
	private HlclGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalHlclParser createParser() {
		InternalHlclParser result = new InternalHlclParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getDomainAccess().getDomAlternatives_0(), "rule__Domain__DomAlternatives_0");
					put(grammarAccess.getConsExpAccess().getAlternatives(), "rule__ConsExp__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
					put(grammarAccess.getRangeDomainAccess().getGroup(), "rule__RangeDomain__Group__0");
					put(grammarAccess.getSetDomainAccess().getGroup(), "rule__SetDomain__Group__0");
					put(grammarAccess.getSetDomainAccess().getGroup_1(), "rule__SetDomain__Group_1__0");
					put(grammarAccess.getSetDomainAccess().getGroup_1_1(), "rule__SetDomain__Group_1_1__0");
					put(grammarAccess.getModelAccess().getVarsAssignment_0(), "rule__Model__VarsAssignment_0");
					put(grammarAccess.getModelAccess().getConstraintsAssignment_1(), "rule__Model__ConstraintsAssignment_1");
					put(grammarAccess.getVariablesAccess().getVarsAssignment(), "rule__Variables__VarsAssignment");
					put(grammarAccess.getVariableAccess().getNameAssignment_1(), "rule__Variable__NameAssignment_1");
					put(grammarAccess.getVariableAccess().getDomAssignment_3(), "rule__Variable__DomAssignment_3");
					put(grammarAccess.getDomainAccess().getDomAssignment(), "rule__Domain__DomAssignment");
					put(grammarAccess.getRangeDomainAccess().getStartAssignment_0(), "rule__RangeDomain__StartAssignment_0");
					put(grammarAccess.getRangeDomainAccess().getEndAssignment_2(), "rule__RangeDomain__EndAssignment_2");
					put(grammarAccess.getSetDomainAccess().getListAssignment_1_0(), "rule__SetDomain__ListAssignment_1_0");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public HlclGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(HlclGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
