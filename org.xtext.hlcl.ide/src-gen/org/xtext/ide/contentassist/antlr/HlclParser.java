/*
 * generated by Xtext 2.13.0
 */
package org.xtext.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.ide.contentassist.antlr.internal.InternalHlclParser;
import org.xtext.services.HlclGrammarAccess;

public class HlclParser extends AbstractContentAssistParser {

	@Inject
	private HlclGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalHlclParser createParser() {
		InternalHlclParser result = new InternalHlclParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getDomAccess().getAlternatives(), "rule__Dom__Alternatives");
					put(grammarAccess.getConsExpAccess().getAlternatives(), "rule__ConsExp__Alternatives");
					put(grammarAccess.getConstraintProgramAccess().getGroup(), "rule__ConstraintProgram__Group__0");
					put(grammarAccess.getVariablesAccess().getGroup(), "rule__Variables__Group__0");
					put(grammarAccess.getRangeDomAccess().getGroup(), "rule__RangeDom__Group__0");
					put(grammarAccess.getSetDomAccess().getGroup(), "rule__SetDom__Group__0");
					put(grammarAccess.getConstraintProgramAccess().getVarsAssignment_1(), "rule__ConstraintProgram__VarsAssignment_1");
					put(grammarAccess.getConstraintProgramAccess().getConstraintsAssignment_3(), "rule__ConstraintProgram__ConstraintsAssignment_3");
					put(grammarAccess.getVariablesAccess().getNameAssignment_1(), "rule__Variables__NameAssignment_1");
					put(grammarAccess.getVariablesAccess().getDomAssignment_3(), "rule__Variables__DomAssignment_3");
					put(grammarAccess.getRangeDomAccess().getStartAssignment_1(), "rule__RangeDom__StartAssignment_1");
					put(grammarAccess.getRangeDomAccess().getEndAssignment_3(), "rule__RangeDom__EndAssignment_3");
					put(grammarAccess.getSetDomAccess().getListAssignment_2(), "rule__SetDom__ListAssignment_2");
					put(grammarAccess.getBoolDomAccess().getDomAssignment(), "rule__BoolDom__DomAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public HlclGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(HlclGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
