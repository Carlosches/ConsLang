/*
 * generated by Xtext 2.13.0
 */
package org.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class HlclGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ConstraintProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Hlcl.ConstraintProgram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVariablesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarsVariablesParserRuleCall_1_0 = (RuleCall)cVarsAssignment_1.eContents().get(0);
		private final Keyword cConstraintsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConstraintsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConstraintsConsExpParserRuleCall_3_0 = (RuleCall)cConstraintsAssignment_3.eContents().get(0);
		
		////genrates the Ecore model from the grammar
		//ConstraintProgram:
		//	'variables:' vars+=Variables+ 'constraints:' constraints+=ConsExp*;
		@Override public ParserRule getRule() { return rule; }
		
		//'variables:' vars+=Variables+ 'constraints:' constraints+=ConsExp*
		public Group getGroup() { return cGroup; }
		
		//'variables:'
		public Keyword getVariablesKeyword_0() { return cVariablesKeyword_0; }
		
		//vars+=Variables+
		public Assignment getVarsAssignment_1() { return cVarsAssignment_1; }
		
		//Variables
		public RuleCall getVarsVariablesParserRuleCall_1_0() { return cVarsVariablesParserRuleCall_1_0; }
		
		//'constraints:'
		public Keyword getConstraintsKeyword_2() { return cConstraintsKeyword_2; }
		
		//constraints+=ConsExp*
		public Assignment getConstraintsAssignment_3() { return cConstraintsAssignment_3; }
		
		//ConsExp
		public RuleCall getConstraintsConsExpParserRuleCall_3_0() { return cConstraintsConsExpParserRuleCall_3_0; }
	}
	public class VariablesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Hlcl.Variables");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cDomainKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDomAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDomDomParserRuleCall_3_0 = (RuleCall)cDomAssignment_3.eContents().get(0);
		
		//Variables:
		//	'var' name=ID 'domain:' dom=Dom;
		@Override public ParserRule getRule() { return rule; }
		
		//'var' name=ID 'domain:' dom=Dom
		public Group getGroup() { return cGroup; }
		
		//'var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'domain:'
		public Keyword getDomainKeyword_2() { return cDomainKeyword_2; }
		
		//dom=Dom
		public Assignment getDomAssignment_3() { return cDomAssignment_3; }
		
		//Dom
		public RuleCall getDomDomParserRuleCall_3_0() { return cDomDomParserRuleCall_3_0; }
	}
	public class DomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Hlcl.Dom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRangeDomParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSetDomParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBoolDomParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStringDomParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		////Variable:
		////	'var' name=ID 'in' dom=Domain
		////	;
		//Dom:
		//	RangeDom | SetDom | BoolDom | StringDom;
		@Override public ParserRule getRule() { return rule; }
		
		//RangeDom | SetDom | BoolDom | StringDom
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RangeDom
		public RuleCall getRangeDomParserRuleCall_0() { return cRangeDomParserRuleCall_0; }
		
		//SetDom
		public RuleCall getSetDomParserRuleCall_1() { return cSetDomParserRuleCall_1; }
		
		//BoolDom
		public RuleCall getBoolDomParserRuleCall_2() { return cBoolDomParserRuleCall_2; }
		
		//StringDom
		public RuleCall getStringDomParserRuleCall_3() { return cStringDomParserRuleCall_3; }
	}
	public class RangeDomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Hlcl.RangeDom");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRangeDomAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStartAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStartINTTerminalRuleCall_1_0 = (RuleCall)cStartAssignment_1.eContents().get(0);
		private final Keyword cColonColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEndAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEndINTTerminalRuleCall_3_0 = (RuleCall)cEndAssignment_3.eContents().get(0);
		
		//RangeDom:
		//	{RangeDom} start=INT '::' end=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//{RangeDom} start=INT '::' end=INT
		public Group getGroup() { return cGroup; }
		
		//{RangeDom}
		public Action getRangeDomAction_0() { return cRangeDomAction_0; }
		
		//start=INT
		public Assignment getStartAssignment_1() { return cStartAssignment_1; }
		
		//INT
		public RuleCall getStartINTTerminalRuleCall_1_0() { return cStartINTTerminalRuleCall_1_0; }
		
		//'::'
		public Keyword getColonColonKeyword_2() { return cColonColonKeyword_2; }
		
		//end=INT
		public Assignment getEndAssignment_3() { return cEndAssignment_3; }
		
		//INT
		public RuleCall getEndINTTerminalRuleCall_3_0() { return cEndINTTerminalRuleCall_3_0; }
	}
	public class SetDomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Hlcl.SetDom");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSetDomAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cListINTTerminalRuleCall_2_0 = (RuleCall)cListAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SetDom:
		//	{SetDom} '[' list+=INT+ ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{SetDom} '[' list+=INT+ ']'
		public Group getGroup() { return cGroup; }
		
		//{SetDom}
		public Action getSetDomAction_0() { return cSetDomAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//list+=INT+
		public Assignment getListAssignment_2() { return cListAssignment_2; }
		
		//INT
		public RuleCall getListINTTerminalRuleCall_2_0() { return cListINTTerminalRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class BoolDomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Hlcl.BoolDom");
		private final Assignment cDomAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cDomBoolDomainKeyword_0 = (Keyword)cDomAssignment.eContents().get(0);
		
		//BoolDom:
		//	dom='boolDomain';
		@Override public ParserRule getRule() { return rule; }
		
		//dom='boolDomain'
		public Assignment getDomAssignment() { return cDomAssignment; }
		
		//'boolDomain'
		public Keyword getDomBoolDomainKeyword_0() { return cDomBoolDomainKeyword_0; }
	}
	public class StringDomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Hlcl.StringDom");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringDomAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cListSTRINGTerminalRuleCall_2_0 = (RuleCall)cListAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StringDom:
		//	{StringDom} '[' list+=STRING+ ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{StringDom} '[' list+=STRING+ ']'
		public Group getGroup() { return cGroup; }
		
		//{StringDom}
		public Action getStringDomAction_0() { return cStringDomAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//list+=STRING+
		public Assignment getListAssignment_2() { return cListAssignment_2; }
		
		//STRING
		public RuleCall getListSTRINGTerminalRuleCall_2_0() { return cListSTRINGTerminalRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class ConsExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Hlcl.ConsExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanExpParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntExpParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConsExp:
		//	BooleanExp | IntExp;
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanExp | IntExp
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BooleanExp
		public RuleCall getBooleanExpParserRuleCall_0() { return cBooleanExpParserRuleCall_0; }
		
		//IntExp
		public RuleCall getIntExpParserRuleCall_1() { return cIntExpParserRuleCall_1; }
	}
	public class BooleanExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Hlcl.BooleanExp");
		private final Keyword cBooleanExpressionKeyword = (Keyword)rule.eContents().get(1);
		
		//BooleanExp:
		//	'Boolean expression';
		@Override public ParserRule getRule() { return rule; }
		
		//'Boolean expression'
		public Keyword getBooleanExpressionKeyword() { return cBooleanExpressionKeyword; }
	}
	public class IntExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Hlcl.IntExp");
		private final Keyword cIntExpressionKeyword = (Keyword)rule.eContents().get(1);
		
		//IntExp:
		//	'Int expression';
		@Override public ParserRule getRule() { return rule; }
		
		//'Int expression'
		public Keyword getIntExpressionKeyword() { return cIntExpressionKeyword; }
	}
	
	
	private final ConstraintProgramElements pConstraintProgram;
	private final VariablesElements pVariables;
	private final DomElements pDom;
	private final RangeDomElements pRangeDom;
	private final SetDomElements pSetDom;
	private final BoolDomElements pBoolDom;
	private final StringDomElements pStringDom;
	private final ConsExpElements pConsExp;
	private final BooleanExpElements pBooleanExp;
	private final IntExpElements pIntExp;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public HlclGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pConstraintProgram = new ConstraintProgramElements();
		this.pVariables = new VariablesElements();
		this.pDom = new DomElements();
		this.pRangeDom = new RangeDomElements();
		this.pSetDom = new SetDomElements();
		this.pBoolDom = new BoolDomElements();
		this.pStringDom = new StringDomElements();
		this.pConsExp = new ConsExpElements();
		this.pBooleanExp = new BooleanExpElements();
		this.pIntExp = new IntExpElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.Hlcl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////genrates the Ecore model from the grammar
	//ConstraintProgram:
	//	'variables:' vars+=Variables+ 'constraints:' constraints+=ConsExp*;
	public ConstraintProgramElements getConstraintProgramAccess() {
		return pConstraintProgram;
	}
	
	public ParserRule getConstraintProgramRule() {
		return getConstraintProgramAccess().getRule();
	}
	
	//Variables:
	//	'var' name=ID 'domain:' dom=Dom;
	public VariablesElements getVariablesAccess() {
		return pVariables;
	}
	
	public ParserRule getVariablesRule() {
		return getVariablesAccess().getRule();
	}
	
	////Variable:
	////	'var' name=ID 'in' dom=Domain
	////	;
	//Dom:
	//	RangeDom | SetDom | BoolDom | StringDom;
	public DomElements getDomAccess() {
		return pDom;
	}
	
	public ParserRule getDomRule() {
		return getDomAccess().getRule();
	}
	
	//RangeDom:
	//	{RangeDom} start=INT '::' end=INT;
	public RangeDomElements getRangeDomAccess() {
		return pRangeDom;
	}
	
	public ParserRule getRangeDomRule() {
		return getRangeDomAccess().getRule();
	}
	
	//SetDom:
	//	{SetDom} '[' list+=INT+ ']';
	public SetDomElements getSetDomAccess() {
		return pSetDom;
	}
	
	public ParserRule getSetDomRule() {
		return getSetDomAccess().getRule();
	}
	
	//BoolDom:
	//	dom='boolDomain';
	public BoolDomElements getBoolDomAccess() {
		return pBoolDom;
	}
	
	public ParserRule getBoolDomRule() {
		return getBoolDomAccess().getRule();
	}
	
	//StringDom:
	//	{StringDom} '[' list+=STRING+ ']';
	public StringDomElements getStringDomAccess() {
		return pStringDom;
	}
	
	public ParserRule getStringDomRule() {
		return getStringDomAccess().getRule();
	}
	
	//ConsExp:
	//	BooleanExp | IntExp;
	public ConsExpElements getConsExpAccess() {
		return pConsExp;
	}
	
	public ParserRule getConsExpRule() {
		return getConsExpAccess().getRule();
	}
	
	//BooleanExp:
	//	'Boolean expression';
	public BooleanExpElements getBooleanExpAccess() {
		return pBooleanExp;
	}
	
	public ParserRule getBooleanExpRule() {
		return getBooleanExpAccess().getRule();
	}
	
	//IntExp:
	//	'Int expression';
	public IntExpElements getIntExpAccess() {
		return pIntExp;
	}
	
	public ParserRule getIntExpRule() {
		return getIntExpAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
