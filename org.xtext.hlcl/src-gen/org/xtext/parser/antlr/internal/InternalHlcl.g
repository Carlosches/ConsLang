/*
 * generated by Xtext 2.13.0
 */
grammar InternalHlcl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.HlclGrammarAccess;

}

@parser::members {

 	private HlclGrammarAccess grammarAccess;

    public InternalHlclParser(TokenStream input, HlclGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "ConstraintProgram";
   	}

   	@Override
   	protected HlclGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleConstraintProgram
entryRuleConstraintProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstraintProgramRule()); }
	iv_ruleConstraintProgram=ruleConstraintProgram
	{ $current=$iv_ruleConstraintProgram.current; }
	EOF;

// Rule ConstraintProgram
ruleConstraintProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='variables:'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstraintProgramAccess().getVariablesKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstraintProgramAccess().getVarsVariablesParserRuleCall_1_0());
				}
				lv_vars_1_0=ruleVariables
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstraintProgramRule());
					}
					add(
						$current,
						"vars",
						lv_vars_1_0,
						"org.xtext.Hlcl.Variables");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_2='constraints:'
		{
			newLeafNode(otherlv_2, grammarAccess.getConstraintProgramAccess().getConstraintsKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstraintProgramAccess().getConstraintsConsExpParserRuleCall_3_0());
				}
				lv_constraints_3_0=ruleConsExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstraintProgramRule());
					}
					add(
						$current,
						"constraints",
						lv_constraints_3_0,
						"org.xtext.Hlcl.ConsExp");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleVariables
entryRuleVariables returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariablesRule()); }
	iv_ruleVariables=ruleVariables
	{ $current=$iv_ruleVariables.current; }
	EOF;

// Rule Variables
ruleVariables returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='var'
		{
			newLeafNode(otherlv_0, grammarAccess.getVariablesAccess().getVarKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVariablesAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariablesRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='domain:'
		{
			newLeafNode(otherlv_2, grammarAccess.getVariablesAccess().getDomainKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariablesAccess().getDomDomParserRuleCall_3_0());
				}
				lv_dom_3_0=ruleDom
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariablesRule());
					}
					set(
						$current,
						"dom",
						lv_dom_3_0,
						"org.xtext.Hlcl.Dom");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDom
entryRuleDom returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDomRule()); }
	iv_ruleDom=ruleDom
	{ $current=$iv_ruleDom.current; }
	EOF;

// Rule Dom
ruleDom returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDomAccess().getRangeDomParserRuleCall_0());
		}
		this_RangeDom_0=ruleRangeDom
		{
			$current = $this_RangeDom_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDomAccess().getSetDomParserRuleCall_1());
		}
		this_SetDom_1=ruleSetDom
		{
			$current = $this_SetDom_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDomAccess().getBoolDomParserRuleCall_2());
		}
		this_BoolDom_2=ruleBoolDom
		{
			$current = $this_BoolDom_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDomAccess().getStringDomParserRuleCall_3());
		}
		this_StringDom_3=ruleStringDom
		{
			$current = $this_StringDom_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRangeDom
entryRuleRangeDom returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRangeDomRule()); }
	iv_ruleRangeDom=ruleRangeDom
	{ $current=$iv_ruleRangeDom.current; }
	EOF;

// Rule RangeDom
ruleRangeDom returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRangeDomAccess().getRangeDomAction_0(),
					$current);
			}
		)
		(
			(
				lv_start_1_0=RULE_INT
				{
					newLeafNode(lv_start_1_0, grammarAccess.getRangeDomAccess().getStartINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRangeDomRule());
					}
					setWithLastConsumed(
						$current,
						"start",
						lv_start_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_2='::'
		{
			newLeafNode(otherlv_2, grammarAccess.getRangeDomAccess().getColonColonKeyword_2());
		}
		(
			(
				lv_end_3_0=RULE_INT
				{
					newLeafNode(lv_end_3_0, grammarAccess.getRangeDomAccess().getEndINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRangeDomRule());
					}
					setWithLastConsumed(
						$current,
						"end",
						lv_end_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleSetDom
entryRuleSetDom returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSetDomRule()); }
	iv_ruleSetDom=ruleSetDom
	{ $current=$iv_ruleSetDom.current; }
	EOF;

// Rule SetDom
ruleSetDom returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSetDomAccess().getSetDomAction_0(),
					$current);
			}
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getSetDomAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				lv_list_2_0=RULE_INT
				{
					newLeafNode(lv_list_2_0, grammarAccess.getSetDomAccess().getListINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSetDomRule());
					}
					addWithLastConsumed(
						$current,
						"list",
						lv_list_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)+
		otherlv_3=']'
		{
			newLeafNode(otherlv_3, grammarAccess.getSetDomAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleBoolDom
entryRuleBoolDom returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolDomRule()); }
	iv_ruleBoolDom=ruleBoolDom
	{ $current=$iv_ruleBoolDom.current; }
	EOF;

// Rule BoolDom
ruleBoolDom returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_dom_0_0='boolDomain'
			{
				newLeafNode(lv_dom_0_0, grammarAccess.getBoolDomAccess().getDomBoolDomainKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getBoolDomRule());
				}
				setWithLastConsumed($current, "dom", lv_dom_0_0, "boolDomain");
			}
		)
	)
;

// Entry rule entryRuleStringDom
entryRuleStringDom returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringDomRule()); }
	iv_ruleStringDom=ruleStringDom
	{ $current=$iv_ruleStringDom.current; }
	EOF;

// Rule StringDom
ruleStringDom returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStringDomAccess().getStringDomAction_0(),
					$current);
			}
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getStringDomAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				lv_list_2_0=RULE_STRING
				{
					newLeafNode(lv_list_2_0, grammarAccess.getStringDomAccess().getListSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStringDomRule());
					}
					addWithLastConsumed(
						$current,
						"list",
						lv_list_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)+
		otherlv_3=']'
		{
			newLeafNode(otherlv_3, grammarAccess.getStringDomAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleConsExp
entryRuleConsExp returns [String current=null]:
	{ newCompositeNode(grammarAccess.getConsExpRule()); }
	iv_ruleConsExp=ruleConsExp
	{ $current=$iv_ruleConsExp.current.getText(); }
	EOF;

// Rule ConsExp
ruleConsExp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConsExpAccess().getBooleanExpParserRuleCall_0());
		}
		this_BooleanExp_0=ruleBooleanExp
		{
			$current.merge(this_BooleanExp_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConsExpAccess().getIntExpParserRuleCall_1());
		}
		this_IntExp_1=ruleIntExp
		{
			$current.merge(this_IntExp_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBooleanExp
entryRuleBooleanExp returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBooleanExpRule()); }
	iv_ruleBooleanExp=ruleBooleanExp
	{ $current=$iv_ruleBooleanExp.current.getText(); }
	EOF;

// Rule BooleanExp
ruleBooleanExp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='Boolean expression'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getBooleanExpAccess().getBooleanExpressionKeyword());
	}
;

// Entry rule entryRuleIntExp
entryRuleIntExp returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIntExpRule()); }
	iv_ruleIntExp=ruleIntExp
	{ $current=$iv_ruleIntExp.current.getText(); }
	EOF;

// Rule IntExp
ruleIntExp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='Int expression'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getIntExpAccess().getIntExpressionKeyword());
	}
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
