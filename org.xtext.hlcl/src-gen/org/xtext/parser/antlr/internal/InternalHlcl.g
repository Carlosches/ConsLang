/*
 * generated by Xtext 2.13.0
 */
grammar InternalHlcl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.HlclGrammarAccess;

}

@parser::members {

 	private HlclGrammarAccess grammarAccess;

    public InternalHlclParser(TokenStream input, HlclGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected HlclGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getVarsVariablesParserRuleCall_0_0());
				}
				lv_vars_0_0=ruleVariables
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"vars",
						lv_vars_0_0,
						"org.xtext.Hlcl.Variables");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getConstraintsConsExpParserRuleCall_1_0());
				}
				lv_constraints_1_0=ruleConsExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"constraints",
						lv_constraints_1_0,
						"org.xtext.Hlcl.ConsExp");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleVariables
entryRuleVariables returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariablesRule()); }
	iv_ruleVariables=ruleVariables
	{ $current=$iv_ruleVariables.current; }
	EOF;

// Rule Variables
ruleVariables returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getVariablesAccess().getVarsVariableParserRuleCall_0());
			}
			lv_vars_0_0=ruleVariable
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getVariablesRule());
				}
				add(
					$current,
					"vars",
					lv_vars_0_0,
					"org.xtext.Hlcl.Variable");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='var'
		{
			newLeafNode(otherlv_0, grammarAccess.getVariableAccess().getVarKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='in'
		{
			newLeafNode(otherlv_2, grammarAccess.getVariableAccess().getInKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableAccess().getDomDomainParserRuleCall_3_0());
				}
				lv_dom_3_0=ruleDomain
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableRule());
					}
					set(
						$current,
						"dom",
						lv_dom_3_0,
						"org.xtext.Hlcl.Domain");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDomain
entryRuleDomain returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDomainRule()); }
	iv_ruleDomain=ruleDomain
	{ $current=$iv_ruleDomain.current; }
	EOF;

// Rule Domain
ruleDomain returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDomainAccess().getDomRangeDomainParserRuleCall_0_0());
				}
				lv_dom_0_1=ruleRangeDomain
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDomainRule());
					}
					set(
						$current,
						"dom",
						lv_dom_0_1,
						"org.xtext.Hlcl.RangeDomain");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getDomainAccess().getDomSetDomainParserRuleCall_0_1());
				}
				lv_dom_0_2=ruleSetDomain
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDomainRule());
					}
					set(
						$current,
						"dom",
						lv_dom_0_2,
						"org.xtext.Hlcl.SetDomain");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRangeDomain
entryRuleRangeDomain returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRangeDomainRule()); }
	iv_ruleRangeDomain=ruleRangeDomain
	{ $current=$iv_ruleRangeDomain.current; }
	EOF;

// Rule RangeDomain
ruleRangeDomain returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_start_0_0=RULE_INT
				{
					newLeafNode(lv_start_0_0, grammarAccess.getRangeDomainAccess().getStartINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRangeDomainRule());
					}
					setWithLastConsumed(
						$current,
						"start",
						lv_start_0_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_1='..'
		{
			newLeafNode(otherlv_1, grammarAccess.getRangeDomainAccess().getFullStopFullStopKeyword_1());
		}
		(
			(
				lv_end_2_0=RULE_INT
				{
					newLeafNode(lv_end_2_0, grammarAccess.getRangeDomainAccess().getEndINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRangeDomainRule());
					}
					setWithLastConsumed(
						$current,
						"end",
						lv_end_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleSetDomain
entryRuleSetDomain returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSetDomainRule()); }
	iv_ruleSetDomain=ruleSetDomain
	{ $current=$iv_ruleSetDomain.current; }
	EOF;

// Rule SetDomain
ruleSetDomain returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getSetDomainAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				(
					lv_list_1_0=RULE_INT
					{
						newLeafNode(lv_list_1_0, grammarAccess.getSetDomainAccess().getListINTTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSetDomainRule());
						}
						setWithLastConsumed(
							$current,
							"list",
							lv_list_1_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			(
				otherlv_2=','
				{
					newLeafNode(otherlv_2, grammarAccess.getSetDomainAccess().getCommaKeyword_1_1_0());
				}
				this_INT_3=RULE_INT
				{
					newLeafNode(this_INT_3, grammarAccess.getSetDomainAccess().getINTTerminalRuleCall_1_1_1());
				}
			)+
		)
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getSetDomainAccess().getRightSquareBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleConsExp
entryRuleConsExp returns [String current=null]:
	{ newCompositeNode(grammarAccess.getConsExpRule()); }
	iv_ruleConsExp=ruleConsExp
	{ $current=$iv_ruleConsExp.current.getText(); }
	EOF;

// Rule ConsExp
ruleConsExp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConsExpAccess().getBooleanExpParserRuleCall_0());
		}
		this_BooleanExp_0=ruleBooleanExp
		{
			$current.merge(this_BooleanExp_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConsExpAccess().getIntExpParserRuleCall_1());
		}
		this_IntExp_1=ruleIntExp
		{
			$current.merge(this_IntExp_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBooleanExp
entryRuleBooleanExp returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBooleanExpRule()); }
	iv_ruleBooleanExp=ruleBooleanExp
	{ $current=$iv_ruleBooleanExp.current.getText(); }
	EOF;

// Rule BooleanExp
ruleBooleanExp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='Boolean expression'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getBooleanExpAccess().getBooleanExpressionKeyword());
	}
;

// Entry rule entryRuleIntExp
entryRuleIntExp returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIntExpRule()); }
	iv_ruleIntExp=ruleIntExp
	{ $current=$iv_ruleIntExp.current.getText(); }
	EOF;

// Rule IntExp
ruleIntExp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='Int expression'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getIntExpAccess().getIntExpressionKeyword());
	}
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
