/**
 * generated by Xtext 2.13.0
 */
package org.xtext.hlcl.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.hlcl.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class HlclFactoryImpl extends EFactoryImpl implements HlclFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static HlclFactory init()
  {
    try
    {
      HlclFactory theHlclFactory = (HlclFactory)EPackage.Registry.INSTANCE.getEFactory(HlclPackage.eNS_URI);
      if (theHlclFactory != null)
      {
        return theHlclFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new HlclFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public HlclFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case HlclPackage.CONSTRAINT_PROGRAM: return createConstraintProgram();
      case HlclPackage.VARIABLES: return createVariables();
      case HlclPackage.DOM: return createDom();
      case HlclPackage.RANGE_DOM: return createRangeDom();
      case HlclPackage.SET_DOM: return createSetDom();
      case HlclPackage.BOOL_DOM: return createBoolDom();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConstraintProgram createConstraintProgram()
  {
    ConstraintProgramImpl constraintProgram = new ConstraintProgramImpl();
    return constraintProgram;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Variables createVariables()
  {
    VariablesImpl variables = new VariablesImpl();
    return variables;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Dom createDom()
  {
    DomImpl dom = new DomImpl();
    return dom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RangeDom createRangeDom()
  {
    RangeDomImpl rangeDom = new RangeDomImpl();
    return rangeDom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SetDom createSetDom()
  {
    SetDomImpl setDom = new SetDomImpl();
    return setDom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BoolDom createBoolDom()
  {
    BoolDomImpl boolDom = new BoolDomImpl();
    return boolDom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public HlclPackage getHlclPackage()
  {
    return (HlclPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static HlclPackage getPackage()
  {
    return HlclPackage.eINSTANCE;
  }

} //HlclFactoryImpl
