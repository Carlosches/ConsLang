/*
 * generated by Xtext 2.13.0
 */
package org.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.hlcl.Domain;
import org.xtext.hlcl.HlclPackage;
import org.xtext.hlcl.Model;
import org.xtext.hlcl.RangeDomain;
import org.xtext.hlcl.SetDomain;
import org.xtext.hlcl.Variable;
import org.xtext.hlcl.Variables;
import org.xtext.services.HlclGrammarAccess;

@SuppressWarnings("all")
public class HlclSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private HlclGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == HlclPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case HlclPackage.DOMAIN:
				sequence_Domain(context, (Domain) semanticObject); 
				return; 
			case HlclPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case HlclPackage.RANGE_DOMAIN:
				sequence_RangeDomain(context, (RangeDomain) semanticObject); 
				return; 
			case HlclPackage.SET_DOMAIN:
				sequence_SetDomain(context, (SetDomain) semanticObject); 
				return; 
			case HlclPackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			case HlclPackage.VARIABLES:
				sequence_Variables(context, (Variables) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Domain returns Domain
	 *
	 * Constraint:
	 *     (dom=RangeDomain | dom=SetDomain)
	 */
	protected void sequence_Domain(ISerializationContext context, Domain semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (vars+=Variables+ constraints+=ConsExp+)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RangeDomain returns RangeDomain
	 *
	 * Constraint:
	 *     (start=INT end=INT)
	 */
	protected void sequence_RangeDomain(ISerializationContext context, RangeDomain semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HlclPackage.Literals.RANGE_DOMAIN__START) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlclPackage.Literals.RANGE_DOMAIN__START));
			if (transientValues.isValueTransient(semanticObject, HlclPackage.Literals.RANGE_DOMAIN__END) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlclPackage.Literals.RANGE_DOMAIN__END));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRangeDomainAccess().getStartINTTerminalRuleCall_0_0(), semanticObject.getStart());
		feeder.accept(grammarAccess.getRangeDomainAccess().getEndINTTerminalRuleCall_2_0(), semanticObject.getEnd());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SetDomain returns SetDomain
	 *
	 * Constraint:
	 *     list=INT
	 */
	protected void sequence_SetDomain(ISerializationContext context, SetDomain semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HlclPackage.Literals.SET_DOMAIN__LIST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlclPackage.Literals.SET_DOMAIN__LIST));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSetDomainAccess().getListINTTerminalRuleCall_1_0_0(), semanticObject.getList());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     (name=ID dom=Domain)
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HlclPackage.Literals.VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlclPackage.Literals.VARIABLE__NAME));
			if (transientValues.isValueTransient(semanticObject, HlclPackage.Literals.VARIABLE__DOM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HlclPackage.Literals.VARIABLE__DOM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getVariableAccess().getDomDomainParserRuleCall_3_0(), semanticObject.getDom());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Variables returns Variables
	 *
	 * Constraint:
	 *     vars+=Variable
	 */
	protected void sequence_Variables(ISerializationContext context, Variables semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
